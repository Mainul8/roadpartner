"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var Streams_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Streams = void 0;
const errors_1 = require("@mongosh/errors");
const decorators_1 = require("./decorators");
const stream_processor_1 = __importDefault(require("./stream-processor"));
const enums_1 = require("./enums");
let Streams = exports.Streams = Streams_1 = class Streams extends decorators_1.ShellApiWithMongoClass {
    static newInstance(database) {
        return new Proxy(new Streams_1(database), {
            get(target, prop) {
                const v = target[prop];
                if (v !== undefined) {
                    return v;
                }
                if (typeof prop === 'string' && !prop.startsWith('_')) {
                    return target.getProcessor(prop);
                }
            },
        });
    }
    constructor(database) {
        super();
        this._database = database;
    }
    get _mongo() {
        return this._database._mongo;
    }
    [enums_1.asPrintable]() {
        return 'Atlas Stream Processing';
    }
    getProcessor(name) {
        return new stream_processor_1.default(this, name);
    }
    async process(pipeline, options) {
        if (!Array.isArray(pipeline) || !pipeline.length) {
            throw new errors_1.MongoshInvalidInputError('Invalid pipeline', errors_1.CommonErrors.InvalidArgument, pipeline);
        }
        const result = await this._runStreamCommand({
            processStreamProcessor: pipeline,
            ...(options ? { options } : {}),
        });
        if (result.ok !== 1) {
            return result;
        }
        const { name, cursorId } = result;
        const sp = this.getProcessor(name);
        async function dropSp() {
            try {
                await sp._drop();
            }
            catch (_a) {
            }
        }
        await this._instanceState.interrupted.withOverrideInterruptBehavior(() => sp._sampleFrom(cursorId), dropSp);
        return dropSp();
    }
    async createStreamProcessor(name, pipeline, options) {
        if (typeof name !== 'string' || name.trim() === '') {
            throw new errors_1.MongoshInvalidInputError(`Invalid processor name: ${name}`, errors_1.CommonErrors.InvalidArgument);
        }
        if (!Array.isArray(pipeline) || !pipeline.length) {
            throw new errors_1.MongoshInvalidInputError('Invalid pipeline', errors_1.CommonErrors.InvalidArgument, pipeline);
        }
        const result = await this._runStreamCommand({
            createStreamProcessor: name,
            pipeline,
            ...(options ? { options } : {}),
        });
        if (result.ok !== 1) {
            return result;
        }
        return this.getProcessor(name);
    }
    async listStreamProcessors(filter) {
        const result = await this._runStreamCommand({
            listStreamProcessors: 1,
            filter,
        });
        if (result.ok !== 1) {
            return result;
        }
        const rawProcessors = result.streamProcessors;
        const sps = rawProcessors.map((sp) => this.getProcessor(sp.name));
        return Object.defineProperties(sps, {
            [enums_1.asPrintable]: { value: () => rawProcessors },
            [enums_1.shellApiType]: { value: 'StreamsListResult' },
        });
    }
    async listConnections(filter) {
        const result = await this._runStreamCommand({
            listStreamConnections: 1,
            filter,
        });
        if (result.ok !== 1) {
            return result;
        }
        return Object.defineProperties(result.connections, {
            [enums_1.shellApiType]: { value: 'StreamsListResult' },
        });
    }
    async _runStreamCommand(cmd, options = {}) {
        return this._mongo._serviceProvider.runCommand(enums_1.ADMIN_DB, cmd, options);
    }
};
__decorate([
    decorators_1.returnsPromise
], Streams.prototype, "process", null);
__decorate([
    decorators_1.returnsPromise
], Streams.prototype, "createStreamProcessor", null);
__decorate([
    decorators_1.returnsPromise
], Streams.prototype, "listStreamProcessors", null);
__decorate([
    decorators_1.returnsPromise
], Streams.prototype, "listConnections", null);
exports.Streams = Streams = Streams_1 = __decorate([
    decorators_1.shellApiClassDefault
], Streams);
//# sourceMappingURL=streams.js.map