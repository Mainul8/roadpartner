"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("./enums");
const decorators_1 = require("./decorators");
let StreamProcessor = class StreamProcessor extends decorators_1.ShellApiWithMongoClass {
    constructor(_streams, name) {
        super();
        this._streams = _streams;
        this.name = name;
    }
    get _mongo() {
        return this._streams._mongo;
    }
    [enums_1.asPrintable]() {
        return `Atlas Stream Processor: ${this.name}`;
    }
    async start() {
        return await this._streams._runStreamCommand({
            startStreamProcessor: this.name,
        });
    }
    async stop() {
        return await this._streams._runStreamCommand({
            stopStreamProcessor: this.name,
        });
    }
    async drop() {
        return this._drop();
    }
    async _drop() {
        return await this._streams._runStreamCommand({
            dropStreamProcessor: this.name,
        });
    }
    async stats(options = {}) {
        return this._streams._runStreamCommand({
            getStreamProcessorStats: this.name,
            ...options,
        });
    }
    async sample(options = {}) {
        const r = await this._streams._runStreamCommand({
            startSampleStreamProcessor: this.name,
            ...options,
        });
        if (r.ok !== 1) {
            return r;
        }
        return this._sampleFrom(r.cursorId);
    }
    async _sampleFrom(cursorId) {
        let currentCursorId = cursorId;
        while (String(currentCursorId) !== '0') {
            const res = await this._streams._runStreamCommand({
                getMoreSampleStreamProcessor: this.name,
                cursorId: currentCursorId,
            });
            if (res.ok !== 1) {
                return res;
            }
            currentCursorId = res.cursorId;
            for (const doc of res.messages) {
                await this._instanceState.shellApi.printjson(doc);
            }
            if (!res.messages.length) {
                const interruptable = this._instanceState.interrupted.asPromise();
                try {
                    await Promise.race([
                        this._instanceState.shellApi.sleep(1000),
                        interruptable.promise,
                    ]);
                }
                finally {
                    interruptable.destroy();
                }
            }
        }
        return;
    }
};
__decorate([
    decorators_1.returnsPromise
], StreamProcessor.prototype, "start", null);
__decorate([
    decorators_1.returnsPromise
], StreamProcessor.prototype, "stop", null);
__decorate([
    decorators_1.returnsPromise
], StreamProcessor.prototype, "drop", null);
__decorate([
    decorators_1.returnsPromise
], StreamProcessor.prototype, "stats", null);
__decorate([
    decorators_1.returnsPromise
], StreamProcessor.prototype, "sample", null);
StreamProcessor = __decorate([
    decorators_1.shellApiClassDefault
], StreamProcessor);
exports.default = StreamProcessor;
//# sourceMappingURL=stream-processor.js.map